name: Workflow to deploy app on remote docker engine
on: 
  push:
    branches:
      - deploy-pipeline
jobs:
  Deploy-App:
    runs-on: ubuntu-latest
    steps:
      - name: Clone frontend repo
        uses: actions/checkout@v2 # https://github.com/actions/checkout
        with:
          repository: I2Tunimib/I2T-frontend
          path: frontend/

      - name: Cache frontend dependencies
        uses: actions/cache@v2 # https://github.com/actions/cache
        with:
          path: ~/frontend/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      
      - name: Build frontend app
        run: cd frontend && npm ci && npm run build && cd ../

      - name: Clone backend repo
        uses: actions/checkout@v2 # https://github.com/actions/checkout
        with:
          path: backend/
      
      - name: Cache backend dependencies
        uses: actions/cache@v2
        with:
          path: ~/backend/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      
      - name: Move frontend build folder inside backend folder
        run: mkdir backend/build && mv frontend/build/* backend/build/ && cd backend/build && ls

      - name: Login to Docker Hub
        uses: docker/login-action@v1 # https://github.com/docker/login-action
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build image and push it to Docker Hub
        run: cd backend && docker-compose build && docker-compose push

      - name: Create remote docker context
        uses: arwynfr/actions-docker-context@v1 #https://github.com/ArwynFr/actions-docker-context
        with:
          docker_host: ssh://${{ secrets.REMOTE_HOST_USERNAME }}@${{ secrets.REMOTE_HOST_IP }}
          context_name: remote
          ssh_cert: ${{ secrets.SSH_CERT }} # generated on remote server
          ssh_key: ${{ secrets.SSH_KEY }} # generated on remote server
          use_context: true

      - name: Pull image and build container
        run: docker-compose pull release && docker-compose down && docker-compose up -d release
