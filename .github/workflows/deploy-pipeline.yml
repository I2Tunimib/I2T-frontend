name: Workflow to deploy app on remote docker engine
on: 
  push:
    branches:
      - main
jobs:
  Deploy-App:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Clone frontend repo
        uses: actions/checkout@v2 # https://github.com/actions/checkout
        with:
          path: frontend/

      - name: Cache frontend dependencies
        uses: actions/cache@v2 # https://github.com/actions/cache
        with:
          path: ~/frontend/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      
      - name: Build frontend app
        run: |
          touch frontend/.env
          echo REACT_APP_BACKEND_API_URL=${{ secrets.REACT_APP_BACKEND_API_URL }} >> frontend/.env
          cd frontend && npm ci && npm run build && cd ../
      - name: Clone backend repo
        uses: actions/checkout@v2 # https://github.com/actions/checkout
        with:
          repository: I2Tunimib/I2T-backend
          path: backend/
      
      - name: Cache backend dependencies
        uses: actions/cache@v2
        with:
          path: ~/backend/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      
      - name: Move frontend build folder inside backend folder
        run: |
          mkdir backend/build 
          mv frontend/build/* backend/build/ 
          cd backend
          ls
      - name: Login to Docker Hub
        uses: docker/login-action@v1 # https://github.com/docker/login-action
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Login to GithHub Container
        uses: docker/login-action@v1 # https://github.com/docker/login-action
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image and push it to Github Container
        run: |
          cd backend
          docker-compose -f docker-compose.image-prod.yml build
          docker-compose -f docker-compose.image-prod.yml push
      
      - name: Create env file for runtime
        run: |
          touch backend/.env
          echo ASIA_EXTENSION=${{ secrets.ASIA_EXTENSION }} >> backend/.env
          echo ASIA_RECONCILIATION=${{ secrets.ASIA_RECONCILIATION }} >> backend/.env
          echo LAMAPI_BASE=${{ secrets.LAMAPI_BASE }} >> backend/.env
          echo LAMAPI_TOKEN=${{ secrets.LAMAPI_TOKEN }} >> backend/.env
          echo WIKIDATA=${{ secrets.WIKIDATA }} >> backend/.env
          echo MANTIS=${{ secrets.MANTIS }} >> backend/.env
          echo MANTIS_AUTH_TOKEN=${{ secrets.MANTIS_AUTH_TOKEN }} >> backend/.env
          echo RELEASE_TAG=${{ github.event.release.tag_name }} >> backend/.env
      
      - name: copy file via ssh key
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST_URL }}
          username: ${{ secrets.REMOTE_HOST_USERNAME }}
          key: ${{ secrets.SSH_PRIV_KEY }}
          source: "backend/docker-compose.prod.yml,backend/.env"
          target: "/datahdd/asia/tui/deploy"

      - name: Deploy through ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST_URL }}
          username: ${{ secrets.REMOTE_HOST_USERNAME }}
          key: ${{ secrets.SSH_PRIV_KEY }}
          script: |
            cd /datahdd/asia/tui
            ls -A
            docker-compose -f docker-compose.prod.yml down --rmi all
            shopt -s dotglob nullglob
            mv deploy/backend/* .
            rm deploy/backend
            docker-compose -f docker-compose.prod.yml pull release
            docker-compose -f docker-compose.prod.yml up -d release